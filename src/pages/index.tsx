import Head from "next/head";
import { api } from "~/utils/api";
import { useEffect, useState } from "react";
import type { BoardOrientation } from "react-chessboard/dist/chessboard/types";
import StartPuzzle from "./StartPuzzle";
import { WHITE } from "~/utils/constants";
import type { Difficulty } from "~/interfaces";
import { getOrientation } from "~/utils/utilFunctions";
import Analysis from "./Analysis";

export default function Home() {
  const [anim, setAnim] = useState(0);
  const [settings, setSettings] = useState({queryEnabled: true, difficulty: "easy", displayPage: "StartPuzzle"});
  const [difficulty, setDifficulty] = useState<Difficulty>("easy");
  // const [settings, setSettings] = useState<Difficulty>(difficulty);
  const [boardOrientation, setBoardOrientation] =
    useState<BoardOrientation>(WHITE);
  const [displayPage, setDisplayPage] = useState("StartPuzzle");

  const { data, isLoading, refetch } = api.puzzles.getOne.useQuery(
    { difficulty: settings.difficulty },
    {
      refetchOnWindowFocus: false,
      enabled: settings.queryEnabled,
      // enabled: false,
      // refetchOnMount: false,
      // refetchOnReconnect: false,
      // cacheTime: 0,
      // staleTime: 0,
      onSuccess: (data) => {
        if (typeof data?.[0]?.fen === "string") {
          console.log("sucess??");
          setBoardOrientation(getOrientation(data[0]));
          if (anim === 0) setAnim(300);
        }
        if (settings.queryEnabled) {
          console.log("settings changed??");
          setSettings((prevSettings) => ({
            ...prevSettings,
            queryEnabled: false,
          }));
        }
      },
    }
  );

  //  const [getOne] = api.useQueries((t) => [
  //   t.puzzles.getOne({difficulty}, {
  //     refetchOnWindowFocus: false,
  //     // enabled: settings.queryEnabled,
  //     // enabled: false,
  //     // refetchOnMount: false,
  //     // refetchOnReconnect: false,
  //     onSuccess: (data) => {
  //       if (typeof data?.[0]?.fen === "string") {
  //         console.log("sucess??");
  //         setBoardOrientation(getOrientation(data[0]));
  //         if (anim === 0) setAnim(300);
  //       }
  //       // if (settings.queryEnabled) {
  //       //   console.log("settings changed??");
  //       //   setSettings((prevSettings) => ({
  //       //     ...prevSettings,
  //       //     queryEnabled: false,
  //       //   }));
  //       // }
  //     },
  //   }),
  //  ], () => {
  //   return true;
  //  });
  //  const { data, isLoading, refetch } = getOne;
  useEffect(() => {
    const fetchData = async () => {
      await refetch();
    }
    if(settings.displayPage === "StartPuzzle") void fetchData();
  }, [settings.displayPage, refetch]);

  const ctx = api.useContext();

  // const refetchQuery = async () => {
  //   await refetch();
  // }

  const nextPuzzle = async () => {
    console.log("nextPuzzle");
    // setDisplayPage("StartPuzzle");
    // await refetch();
    // setSettings(prevSettings => ({ ...prevSettings, difficulty, displayPage: "StartPuzzle" }));
    setSettings({
      ...settings,
      difficulty,
      displayPage: "StartPuzzle",
    });

    // void ctx.puzzles.getOne.cancel();

    // await refetch();

    // setDifficulty(settings);
  };

  const changeDifficulty = (event: React.ChangeEvent<HTMLSelectElement>) => {
    // setSettings(event.target.value as Difficulty);
    setDifficulty(event.target.value as Difficulty);
    // void ctx.puzzles.getOne.cancel();
  };

  if (isLoading) return <div>Loading</div>;

  if (!data || !data[0]) return <div>Something went wrong</div>;

  console.log("data", data);
  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex h-screen justify-center">
        <div className="h-full w-full md:max-w-5xl">
          {settings.displayPage === "StartPuzzle" && (
            <StartPuzzle
              data={data}
              isLoading={isLoading}
              boardOrientation={boardOrientation}
              anim={anim}
              // difficulty={difficulty}
              // nextPage={() => setDisplayPage("Analysis")}
              nextPage={() => setSettings(prevSettings => ({...prevSettings, displayPage: "Analysis"}))}
            />
          )}
          {settings.displayPage === "Analysis" && (
            <Analysis
              data={data}
              anim={anim}
              boardOrientation={boardOrientation}
              nextPage={nextPuzzle}
              // optionValue={settings}
              optionValue={difficulty}
              handleChange={changeDifficulty}
            />
          )}
        </div>
      </main>
    </>
  );
}
