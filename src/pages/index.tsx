import Head from "next/head";
import { type RouterOutputs, api } from "~/utils/api";
import { useState } from "react";
import StartPuzzle from "./StartPuzzle";
import { WHITE } from "~/utils/constants";
import type { BoardOrientation, Difficulty } from "~/interfaces";
import { getOrientation } from "~/utils/utilFunctions";

export default function Home() {
  const [anim, setAnim] = useState(0);
  const [difficulty, setDifficulty] = useState<Difficulty>("easy");
  const [boardOrientation, setBoardOrientation] = useState<BoardOrientation>(WHITE);

  const { data, isLoading, refetch } = api.puzzles.getOne.useQuery(
    { difficulty },
    {
      refetchOnWindowFocus: false,
      onSuccess: (data) => {
        if (typeof data?.[0]?.fen === "string") {
          setBoardOrientation(getOrientation(data[0]));
          if (anim === 0) setAnim(300);
        }
      },
    }
  );
 
  const refetchQuery = async () => {
    await refetch();
  }

  if (isLoading) return <div>Loading</div>;

  if (!data || !data[0]) return <div>Something went wrong</div>;

  console.log("boardorientation", boardOrientation)
  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex h-screen justify-center">
        <div className="h-full w-full md:max-w-5xl">
          <StartPuzzle data={data} isLoading={isLoading} refetch={refetchQuery} boardOrientation={boardOrientation} anim={anim} difficulty={difficulty} setDifficulty={(difficulty: Difficulty) => setDifficulty(difficulty)}/>
        </div>
      </main>
    </>
  );
}
